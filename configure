#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize

# check for `cmake` command
type cmake > /dev/null 2>&1 || {
    echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
    exit 1;
}

# check for `python` command
type python > /dev/null 2>&1 || {
    echo "This package requires Python, please install it first." >&2;
}

site_packages=`python -c "from distutils.sysconfig import get_python_lib;\
print get_python_lib(True)"`
pyver=`python -c "import sys; print \"%s.%s\" % (sys.version_info[0], sys.version_info[1])"`

usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Build Directory:
    --builddir=DIR         place build files in directory [build]

  Installation Directories:
    --prefix=PREFIX        installs to [PREFIX/lib/python${pyver}/site-packages]
    --home=PATH            installs to [PATH/lib/python]

  Optional Features:
    --enable-debug         compile in debugging mode

  Required Packages in Non-Standard Locations:
    --with-broccoli=PATH   path to Broccoli install root

  Influential Environment Variables (only on first invocation
  per build directory):
    CC                     C compiler command
    CFLAGS                 C compiler flags
    CXX                    C++ compiler command
    CXXFLAGS               C++ compiler flags
"

sourcedir=`dirname $0`
if [ "$sourcedir" = "." ]; then
    sourcedir=`pwd`
fi

# Function to append a CMake cache entry definition to the
# CMakeCacheEntries variable
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry () {
    CMakeCacheEntries="$CMakeCacheEntries -D $1:$2=$3"
}

# set defaults
builddir=build
CMakeCacheEntries=""
append_cache_entry PY_MOD_INSTALL_DIR   PATH     $site_packages
append_cache_entry ENABLE_DEBUG         BOOL     false

# parse arguments
while [ $# -ne 0 ]; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac

    case "$1" in
        --help|-h)
            echo "${usage}" 1>&2
            exit 1
            ;;
        --builddir=*)
            builddir=$optarg
            ;;
        --prefix=*)
            append_cache_entry PY_MOD_INSTALL_DIR   PATH   $optarg/lib/python${pyver}/site-packages
            ;;
        --home=*)
            append_cache_entry PY_MOD_INSTALL_DIR   PATH   $optarg/lib/python
            ;;
        --enable-debug)
            append_cache_entry ENABLE_DEBUG         BOOL   true
            ;;
        --with-broccoli=*)
            append_cache_entry Broccoli_ROOT_DIR PATH $optarg
            ;;
        *)
            echo "Invalid option '$1'.  Try $0 --help to see available options."
            exit 1
            ;;
    esac
    shift
done

if [ -d $builddir ]; then
    # If build directory exists, check if it has a CMake cache
    if [ -f $builddir/CMakeCache.txt ]; then
        # If the Cmake cache exists, then check that it thinks
        # the source tree exists where it's currently located
        cmakehomedir=`grep CMAKE_HOME_DIRECTORY $builddir/CMakeCache.txt | \
                      sed 's/CMAKE_HOME_DIRECTORY:INTERNAL=//g'`
        if [ "$cmakehomedir" != "$sourcedir" ]; then
            # The source tree moved since the build was last configured
            echo "\
The source tree has been moved from:
    $cmakehomedir
to:
    $sourcedir
To reconfigure in the new source directory, please delete:
    $builddir/CMakeCache.txt" >&2
            exit 1
        fi
    fi
else
    # Create build directory
    mkdir -p $builddir
fi

echo "Build Directory : $builddir"
echo "Source Directory: $sourcedir"
cd $builddir
cmake $CMakeCacheEntries $sourcedir
